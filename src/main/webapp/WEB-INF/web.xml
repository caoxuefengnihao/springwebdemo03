<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>

  <display-name>Archetype Created Web Application</display-name>

  <!--指定applicationContext.xml的位置-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!--配置spring监听器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>



<!--
这种方式太麻烦
在我们上面创建的Servlet中，
Servlet的配置信息都是在web.xml中完成的。
如果，我们创建的Servlet非常多，
就会导致web.xml中的配置非常臃肿，
不便于管理。Servlet3.0为我们提供了注解支持，创建Servlet的时候。
在这个Servlet类上面添加注解就可以完成Servlet的配置。
Servlet3.0除了提供注解支持，还提供了以下新特性

创建完成后，Servlet类上面会默认添加一个注解@WebServlet(name="Servlet3Demo") 。这个@WebServlet注解就是用来配置当前这个Servlet的。这个注解中常用的有两个属性：

1. name属性： 相当于web.xml的 <servlet-name>；
2. urlPatterns属性： 编写访问servlet的路径  类似于 <url-pattern>

所以，我们需要手动在@WebServlet 注解中添加urlPatterns属性，来设置映射路径


-->
  <!--<servlet>
    <servlet-name>HelloServlet</servlet-name>
    <servlet-class>cn.web.HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>HelloServlet</servlet-name>
    <url-pattern>/hello</url-pattern>
  </servlet-mapping>-->

  <!--默认访问哪个页面 也就是初始页面-->
  <!--
  jsp执行流程  先把jsp翻译成java文件  再有tomcat执行
  编码分类
  设置jsp文件的编码（jsp文件中的pageEncoding属性） jsp 转 java
  设置浏览器读取jsp文件的编码（jsp文件中的context属性）
  jsp的页面元素
  1 脚本Scriptlet
    <%  里面可以写java代码 局部变量  %>
    <%! 里面可以定义全局变量 方法 %>
    <%=  输出代码  out.write()  %>

    jsp内置对象 自带的 不需要new  也能使用的对象
    out
    pageContext
    request
    response
    session
    application
    config
    page
    exception

    jsp访问数据库

  -->
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--加载指定位置的springmvc的配置文件-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:springmvc-servlet.xml</param-value>
    </init-param>
    <!--配置tomcat启动时初始化前端控制器-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <!--控制器会拦截以全部请求 交给springmvc处理-->
    <!-- 注意这里不能拦截使用‘/’拦截所有请求 会导致js等静态文件无法加载 -->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

  <welcome-file-list>
    <welcome-file>login.jsp</welcome-file>
  </welcome-file-list>

</web-app>
